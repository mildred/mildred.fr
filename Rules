#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  # authors may unpublish items by setting meta attribute publish: false
  items.delete_if { |item| item[:publish] == false }

  paginate_articles
  create_tag_pages
  add_update_item_attributes
  puts "Copy static content..."
  #copy_static
end

compile '/static/*/' do
end

compile '/css/*/' do
  filter :sass
end

route '/css/*/' do
  item.identifier.chop + '.css'
end

compile '/tags/*/' do
  filter :haml
  layout 'default'
end

compile %r{^/Blog/([0-9]+/)?$} do
  filter :haml
  layout 'default'
end

compile "/atom/" do
  filter :erb
end

compile "/sitemap/" do
  filter :erb
end

compile '*' do
  # item[:extension] returns 'html.erb' for multi-dotted filename
  ext = item[:extension].nil? ? nil : item[:extension].split('.').last

  if ext == "html"
  elsif ext == 'erb' || ext.nil?
    filter :erb
  elsif ext == 'haml'
    filter :haml
  elsif ext == 'md' || ext == 'markdown'
    filter :erb
    filter :kramdown
  elsif ext == 'scss'
    filter :sass, :style => :scss
    item[:layout] = "none" unless item[:layout]
  elsif ext == 'sass'
    filter :sass
    item[:layout] = "none" unless item[:layout]
  else
    raise "Filter is not configured for item #{item.identifier} (#{ext}) in Rules file."
  end


  item[:layout] = "default" unless item[:layout]
  layout item[:layout] unless item[:layout] == "none"
end

route "/static/*" do
  item[:filename].gsub(%r{^content/static/}, "/")
end

route "/atom/" do
  "/atom.xml"
end

route '/style/' do
  "/style.css"
end

route "/sitemap/" do
  "/sitemap.xml"
end

route %r{^/Blog/[0-9]+/$} do
  item.identifier.chop + ".html"
end

route %r{^/Blog/[0-9]+-[0-9]+-[0-9]+-.*/} do
  item.identifier.gsub(%r{/([0-9]+)-([0-9]+)-([0-9]+)-(.*/)$}, "/\\1/\\2/\\3/\\4") + "index.html"
end

route "*" do
  item.identifier + 'index.html'
end

layout '*', :haml, :format => :html5

