--- 
title:      PIPE(E)
created_at: 2011-03-29 14:34:17.356692 +02:00
excerpt:
kind:       article
publish:    true
tags:
  - lisaac
  - comp
  - en
--- 

Inspired from ruby #Array:

    Section Header

      + name := PIPE(E);

    Section Private

      + blc :{;BOOLEAN,E};

    Section Public

      - create blc_:{;BOOLEAN,E} :SELF <-
      (
        blc := blc_;
        Self
      );

      - read :(BOOLEAN,E) <- blc.value

      - map blc:{E;X} :PIPE(X) <-
      ( // Upvalue Self
        PIPE(X).clone.make {
          + have_e :BOOLEAN;
          + e :E;
          (have_e, e) := Self.read;
          have_e.if {
            e := blc.value e;
          };
          have_e, e
        }
      );

      - select blc:{E;BOOLEAN} :PIPE(E) <-
      ( // Upvalue Self
        PIPE(E).clone.make {
          + have_e :BOOLEAN;
          + e :E;
          (have_e, e) := Self.read;
          have_e.if {
            blc.value e.if_false {
              have_e := FALSE;
            };
          };
          have_e, e
        }
      );

      - flatten_1 :PIPE(X) <-
      ( // Upvalue Self, buffer
        + buffer :PIPE(X);
        PIPE(X).clone.make {
          + have_e, have_x :BOOLEAN;
          + e :E;
          + x :X;
          buffer.is_null.if_false {
            (have_e, e) := buffer.read;
            have_e.if_false {
              buffer := NULL;
            };
          };
          buffer.is_null.if {
            (have_e, e) := Self.read;
            have_e.if {
              (buffer ?= e).is_null.if_false {
                (have_x, x) := buffer.read
                // TODO: cas oÃ¹ have_e = FALSE (buffer est vide)
              };
            };
          };
          have_x, x
        }
      );

      - to_array_of_e :ARRAY(E) <-
      ( + result :ARRAY(E);
        + have_e :BOOLEAN;
        + e :E;
        {(have_e, e) := read;
        have_e
        }.while_do {
          result.add_last e;
        };
        result
      );

TODO:

  - Upvalue
  - Syntax improvement (block input variables is too verbose)
  - More typing of parameter types, particurlarly as return values (map return unknown type X)
  - `var := bool.if {val1} else {val2}`
  - NULL.is_null -> TRUE
